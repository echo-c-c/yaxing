class ImageViewer {
    constructor() {
        this.createViewer();
        this.currentCategory = null;
        this.currentIndex = 0;
        this.images = [];
        this.isZoomed = true;
        this.zoomScale = 3; // 3x zoom scale
        this.setupEventListeners();
        console.log("ImageViewer initialized with zoom scale:", this.zoomScale);
    }

    createViewer() {
        const viewer = document.createElement('div');
        viewer.className = 'image-viewer';
        viewer.innerHTML = `
            <div class="viewer-content">
                <button class="viewer-close">&times;</button>
                <div class="viewer-image-container">
                    <img class="viewer-image zoomed" src="" alt="">
                </div>
                <button class="viewer-nav viewer-prev">&lt;</button>
                <button class="viewer-nav viewer-next">&gt;</button>
                <div class="viewer-caption"></div>
                <button class="viewer-zoom">
                    <i class="fas fa-search-minus"></i>
                </button>
            </div>
        `;
        document.body.appendChild(viewer);
        this.viewer = viewer;
        this.imageContainer = viewer.querySelector('.viewer-image-container');
        this.image = viewer.querySelector('.viewer-image');
        this.caption = viewer.querySelector('.viewer-caption');
        this.zoomButton = viewer.querySelector('.viewer-zoom');

        // Add styles for zoom functionality
        const style = document.createElement('style');
        style.textContent = `
            .viewer-image-container {
                position: relative;
                width: 100%;
                height: 100%;
                display: flex;
                justify-content: center;
                align-items: center;
                overflow: hidden;
            }
            .viewer-image {
                max-width: 90vw;
                max-height: 80vh;
                transition: transform 0.3s ease;
                cursor: zoom-out;
            }
            .viewer-image.zoomed {
                transform: scale(3) !important;
                cursor: zoom-out;
            }
            .viewer-image:not(.zoomed) {
                transform: scale(1) !important;
                cursor: zoom-in;
            }
            .viewer-zoom {
                position: absolute;
                bottom: 20px;
                right: 20px;
                background: rgba(255, 255, 255, 0.8);
                border: none;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                cursor: pointer;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background-color 0.3s;
                z-index: 1010;
            }
            .viewer-zoom:hover {
                background: rgba(255, 255, 255, 0.9);
            }
            @media (max-width: 768px) {
                .viewer-zoom {
                    width: 35px;
                    height: 35px;
                    bottom: 15px;
                    right: 15px;
                }
            }
            .image-viewer {
                z-index: 1000;
            }
            .viewer-content {
                z-index: 1001;
            }
            .viewer-close, .viewer-nav {
                z-index: 1010;
            }
        `;
        document.head.appendChild(style);
    }

    setupEventListeners() {
        // Close button
        this.viewer.querySelector('.viewer-close').addEventListener('click', () => this.close());

        // Navigation buttons
        this.viewer.querySelector('.viewer-prev').addEventListener('click', () => this.prev());
        this.viewer.querySelector('.viewer-next').addEventListener('click', () => this.next());

        // Zoom functionality
        this.image.addEventListener('click', () => this.toggleZoom());
        this.zoomButton.addEventListener('click', () => this.toggleZoom());

        // Pan functionality when zoomed
        let isDragging = false;
        let startX, startY, initialX, initialY;

        this.image.addEventListener('mousedown', (e) => {
            if (!this.isZoomed) return;
            isDragging = true;
            startX = e.clientX;
            startY = e.clientY;
            initialX = this.image.offsetLeft;
            initialY = this.image.offsetTop;
            this.image.style.cursor = 'grabbing';
        });

        document.addEventListener('mousemove', (e) => {
            if (!isDragging) return;
            e.preventDefault();
            const dx = e.clientX - startX;
            const dy = e.clientY - startY;
            this.image.style.transform = `translate(${dx}px, ${dy}px) scale(${this.zoomScale})`;
        });

        document.addEventListener('mouseup', () => {
            isDragging = false;
            this.image.style.cursor = this.isZoomed ? 'zoom-out' : 'zoom-in';
        });

        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (!this.viewer.classList.contains('active')) return;
            
            switch(e.key) {
                case 'Escape':
                    this.close();
                    break;
                case 'ArrowLeft':
                    this.prev();
                    break;
                case 'ArrowRight':
                    this.next();
                    break;
                case ' ':
                    this.toggleZoom();
                    break;
            }
        });

        // Initialize product images
        this.initializeProductImages();
    }

    toggleZoom() {
        this.isZoomed = !this.isZoomed;
        console.log("Toggle zoom:", this.isZoomed ? "Zoomed" : "Normal");
        
        this.image.classList.toggle('zoomed');
        this.image.style.cursor = this.isZoomed ? 'zoom-out' : 'zoom-in';
        this.zoomButton.querySelector('i').className = this.isZoomed ? 'fas fa-search-minus' : 'fas fa-search-plus';
        
        // Force the transform to be applied directly to ensure zoom works
        if (this.isZoomed) {
            this.image.style.transform = `scale(${this.zoomScale})`;
        } else {
            this.image.style.transform = 'scale(1)';
        }
    }

    initializeProductImages() {
        const productItems = document.querySelectorAll('.product-item');
        console.log("Found product items:", productItems.length);
        
        productItems.forEach(item => {
            const img = item.querySelector('img');
            if (img) {
                item.addEventListener('click', (e) => {
                    const category = item.closest('.product-category');
                    if (category) {
                        const images = Array.from(category.querySelectorAll('.product-item img'));
                        console.log("Opening image gallery with", images.length, "images");
                        this.openCategory(images, images.indexOf(img));
                    }
                });
            }
        });
    }

    openCategory(images, index) {
        this.images = images;
        this.currentIndex = index;
        this.show();
    }

    show() {
        if (this.images.length === 0) return;
        
        const currentImage = this.images[this.currentIndex];
        this.image.src = currentImage.src;
        this.image.alt = currentImage.alt;
        this.caption.textContent = currentImage.alt;
        this.viewer.classList.add('active');
        
        // Apply zoom immediately
        this.isZoomed = true;
        this.image.classList.add('zoomed');
        this.image.style.cursor = 'zoom-out';
        this.zoomButton.querySelector('i').className = 'fas fa-search-minus';
        
        // Force the 3x zoom by directly setting the style
        setTimeout(() => {
            this.image.style.transform = `scale(${this.zoomScale})`;
            console.log("Image displayed with zoom scale:", this.zoomScale);
        }, 50);

        // Update navigation visibility
        this.updateNavigation();
    }

    updateNavigation() {
        const prevButton = this.viewer.querySelector('.viewer-prev');
        const nextButton = this.viewer.querySelector('.viewer-next');
        
        prevButton.style.display = this.currentIndex > 0 ? 'flex' : 'none';
        nextButton.style.display = this.currentIndex < this.images.length - 1 ? 'flex' : 'none';
    }

    close() {
        this.viewer.classList.remove('active');
        this.isZoomed = true;
        this.image.classList.add('zoomed');
    }

    prev() {
        if (this.currentIndex > 0) {
            this.currentIndex--;
            this.show();
        }
    }

    next() {
        if (this.currentIndex < this.images.length - 1) {
            this.currentIndex++;
            this.show();
        }
    }
}

// Initialize the image viewer when the DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.imageViewer = new ImageViewer();
}); 